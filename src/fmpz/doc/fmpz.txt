/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2009 William Hart

******************************************************************************/

*******************************************************************************

    Memory management

*******************************************************************************

void fmpz_init(fmpz_t f)

    A small \code{fmpz_t} is initialised, i.e.\ just a \code{long}.  
    The value is set to zero.

void fmpz_init2(fmpz_t f, ulong limbs)

    Initialises the given \code{fmpz_t} to have space for the given 
    number of limbs.

    If \code{limbs} is zero then a small \code{fmpz_t} is allocated, 
    i.e.\ just a \code{long}.  The value is also set to zero.  It is 
    not necessary to call this function except to save time.  A call 
    to \code{fmpz_init} will do just fine.

void fmpz_clear(fmpz_t f)

    Clears the given \code{fmpz_t}, releasing any memory associated
    with it, either back to the stack or the OS, depending on
    whether the reentrant or non-reentrant version of FLINT is built.

*******************************************************************************

    Random generation

    For thread-safety, the randomisation methods take as one of their 
    parameters an object of type \code{flint_rand_t}.  Before calling 
    any of the randomisation functions such an object first has to be 
    initialised with a call to \code{flint_randinit()}.  When one is 
    finished generating random numbers, one should call 
    \code{flint_randclear()} to clean up.

*******************************************************************************

void fmpz_randbits(fmpz_t f, flint_rand_t state, mp_bitcnt_t bits)

    Generates a random signed integer whose absolute value has the given
    number of bits.

void fmpz_randtest(fmpz_t f, flint_rand_t state, mp_bitcnt_t bits)

    Generates a random signed integer whose absolute value has a number
    of bits which is random from $0$ up to \code{bits} inclusive.

void fmpz_randtest_unsigned(fmpz_t f, flint_rand_t state, mp_bitcnt_t bits)

    Generates a random unsigned integer whose value has a number
    of bits which is random from $0$ up to \code{bits} inclusive.

void fmpz_randtest_not_zero(fmpz_t f, flint_rand_t state, mp_bitcnt_t bits)

    As per \code{fmpz_randtest}, but the result will not be $0$. 
    If \code{bits} is set to $0$, an exception will result.

void fmpz_randm(fmpz_t f, flint_rand_t state, fmpz_t m)

    Generates a random integer in the range $0$ to $m - 1$ inclusive.

void fmpz_randtest_mod(fmpz_t f, flint_rand_t state, const fmpz_t m)

    Generates a random integer in the range $0$ to $m - 1$ inclusive,
    with an increased probability of generating values close to
    the endpoints.

void fmpz_randtest_mod_signed(fmpz_t f, flint_rand_t state, const fmpz_t m)

    Generates a random integer in the range $[-m/2, m/2)$, with an
    increased probability of generating values close to the
    endpoints or close to zero.


*******************************************************************************

    Conversion

*******************************************************************************

ulong fmpz_get_si(const fmpz_t f)

    Returns $f$ as a \code{signed long}.  The result is undefined
    if $f$ does not fit into a \code{long}.

ulong fmpz_get_ui(const fmpz_t f)

    Returns $f$ as an \code{unsigned long}.  The result is undefined
    if $f$ does not fit into an \code{unsigned long} or is negative.

double fmpz_get_d_2exp(long * exp, const fmpz_t f)

    Returns $f$ as a normalized \code{double} along with a $2$-exponent 
    \code{exp}, i.e.\ if $r$ is the return value then \code{f = r * 2^exp}, 
    to within 1 ULP.

void fmpz_get_mpz(mpz_t x, const fmpz_t f)

    Returns $f$ as an \code{mpz_t}.

char * fmpz_get_str(char * str, int b, const fmpz_t f)

    Returns the representation of $f$ in base~$b$, which can vary 
    between $2$ and $62$, inclusive.

    If \code{str} is \code{NULL}, the result string is allocated by the 
    function.  Otherwise, it is up to the caller to ensure the allocated 
    block of memory is sufficiently large.

void fmpz_set_si(fmpz_t f, long val)

    Sets $f$ to the given \code{signed long} value.

void fmpz_set_ui(fmpz_t f, ulong val)

    Sets $f$ to the given \code{unsigned long} value.

void fmpz_set_mpz(fmpz_t f, const mpz_t x)

    Sets $f$ to the given \code{mpz_t} value.

int fmpz_set_str(fmpz_t f, char * str, int b)

    Sets $f$ to the value given in the null-terminated string \code{str}, 
    in base~$b$. The base~$b$ can vary between $2$ and $62$, inclusive. 
    Returns $0$ if the string contains a valid input and $-1$ otherwise.

*******************************************************************************

    Input and output

*******************************************************************************

void fmpz_read(fmpz_t f)

    Reads a multiprecision integer from \code{stdin}.  The format is
    an optional minus sign, followed by one or more digits.  The
    first digit should be non-zero unless it is the only digit.

    In case of success, returns a positive number.  In case of failure, 
    returns a non-positive number.

    This convention is adopted in light of the return values of 
    \code{scanf} from the standard library and \code{mpz_inp_str} 
    from MPIR.

void fmpz_fread(FILE * file, fmpz_t f)

    Reads a multiprecision integer from the stream \code{file}.  The 
    format is an optional minus sign, followed by one or more digits.
    The first digit should be non-zero unless it is the only digit.

    In case of success, returns a positive number.  In case of failure, 
    returns a non-positive number.

    This convention is adopted in light of the return values of 
    \code{scanf} from the standard library and \code{mpz_inp_str} 
    from MPIR.

int fmpz_print(fmpz_t x)

    Prints the value $x$ to \code{stdout}, without a carriage return.
    The value is printed as either $0$, the decimal digits of a 
    positive integer, or a minus sign followed by the digits of 
    a negative integer.

    In case of success, returns a positive number.  In case of failure, 
    returns a non-positive number.

    This convention is adopted in light of the return values of 
    \code{printf} from the standard library and \code{mpz_out_str} 
    from MPIR.

int fmpz_fprint(FILE * file, fmpz_t x)

    Prints the value $x$ to \code{file}, without a carriage return.
    The value is printed as either $0$, the decimal digits of a 
    positive integer, or a minus sign followed by the digits of 
    a negative integer.

    In case of success, returns a positive number.  In case of failure, 
    returns a non-positive number.

    This convention is adopted in light of the return values of 
    \code{printf} from the standard library and \code{mpz_out_str} 
    from MPIR.

*******************************************************************************

    Basic properties and manipulation

*******************************************************************************

size_t fmpz_sizeinbase(const fmpz_t f, int b)

    Returns the size of $f$ in base~$b$, measured in numbers of digits. 
    The base~$b$ can be between $2$ and $62$, inclusive.

mp_bitcnt_t fmpz_bits(const fmpz_t f)

    Returns the number of bits required to store the absolute
    value of $f$.  If $f$ is $0$ then $0$ is returned.

mp_size_t fmpz_size(const fmpz_t f)

    Returns the number of limbs required to store the absolute
    value of $f$.  If $f$ is zero, then $0$ is returned.

int fmpz_sgn(const fmpz_t f)

    Returns $-1$ is the sign of $f$ is negative, $+1$ if it is positive,
    otherwise returns $0$.

void fmpz_swap(fmpz_t f, fmpz_t g)

    Efficiently swaps $f$ and $g$.  No data is copied.

void fmpz_set(fmpz_t f, const fmpz_t g)

    Sets $f$ to equal $g$.

void fmpz_zero(fmpz_t f)

    Sets $f$ to zero.

*******************************************************************************

    Comparison

*******************************************************************************

int fmpz_cmp(const fmpz_t f, const fmpz_t g)

    Returns a negative value if $f < g$, positive value if $g < f$, 
    otherwise returns $0$.

int fmpz_cmp_ui(const fmpz_t f, ulong g)

    Returns a negative value if $f < g$, positive value if $g < f$, 
    otherwise returns $0$.

int fmpz_cmpabs(const fmpz_t f, const fmpz_t g)

    Returns a negative value if $\abs{f} < \abs{g}$, positive value if 
    $\abs{g} < \abs{f}$, otherwise returns $0$.

int fmpz_equal(const fmpz_t f, const fmpz_t g)

    Returns $1$ if $f$ is equal to $g$, otherwise returns $0$.

int fmpz_is_zero(const fmpz_t f)

    Returns $1$ if $f$ is $0$, otherwise returns $0$.

int fmpz_is_one(const fmpz_t f)

    Returns $1$ if $f$ is equal to one, otherwise returns $0$.

*******************************************************************************

    Basic arithmetic

*******************************************************************************

void fmpz_neg(fmpz_t f1, const fmpz_t f2)

    Sets $f_1$ to $-f_2$.

void fmpz_abs(fmpz_t f1, const fmpz_t f2)

    Sets $f_1$ to the absolute value of $f_2$.

void fmpz_add(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to $g + h$.

void fmpz_add_ui(fmpz_t f, const fmpz_t g, ulong x)

    Sets $f$ to $g + x$ where $x$ is an \code{unsigned long}.

void fmpz_sub(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to $g - h$.

void fmpz_sub_ui(fmpz_t f, const fmpz_t g, ulong x)

    Sets $f$ to $g - x$ where $x$ is an \code{unsigned long}.

void fmpz_mul(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to $g \times h$.

void fmpz_mul_si(fmpz_t f, const fmpz_t g, long x)

    Sets $f$ to $g \times x$ where $x$ is a \code{signed long}.

void fmpz_mul_ui(fmpz_t f, const fmpz_t g, ulong x)

    Sets $f$ to $g \times x$ where $x$ is an \code{unsigned long}.

void fmpz_mul_2exp(fmpz_t f, const fmpz_t g, ulong exp)

    Sets $f$ to \code{g * 2^exp}.

void fmpz_addmul(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to $f + g \times h$.

void fmpz_addmul_ui(fmpz_t f, const fmpz_t g, ulong x)

    Sets $f$ to $f + g \times x$ where $x$ is an \code{unsigned long}.

void fmpz_submul(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to $f - g \times h$.

void fmpz_submul_ui(fmpz_t f, const fmpz_t g, ulong x)

    Sets $f$ to $f - g \times x$ where $x$ is an \code{unsigned long}.

void fmpz_cdiv_q(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to the quotient of $g$ by $h$, rounding up towards
    infinity.  If $h$ is $0$ an exception is raised.

void fmpz_cdiv_q_si(fmpz_t f, const fmpz_t g, long h)

    Sets $f$ to the quotient of $g$ by $h$, rounding up towards
    infinity.  If $h$ is $0$ an exception is raised.

void fmpz_cdiv_q_ui(fmpz_t f, const fmpz_t g, ulong h)

    Sets $f$ to the quotient of $g$ by $h$, rounding up towards
    infinity.  If $h$ is $0$ an exception is raised.

void fmpz_fdiv_q(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to the quotient of $g$ by $h$, rounding down towards
    minus infinity.  If $h$ is $0$ an exception is raised.

void fmpz_fdiv_q_si(fmpz_t f, const fmpz_t g, long h)

    Set $f$ to the quotient of $g$ by $h$, rounding down towards
    minus infinity.  If $h$ is $0$ an exception is raised.

void fmpz_fdiv_q_ui(fmpz_t f, const fmpz_t g, ulong h)

    Set $f$ to the quotient of $g$ by $h$, rounding down towards
    minus infinity.  If $h$ is $0$ an exception is raised.

void fmpz_fdiv_qr(fmpz_t f, fmpz_t s, const fmpz_t g, const fmpz_t h)

    Sets $f$ to the quotient of $g$ by $h$, rounding down towards
    minus infinity and $s$ to the remainder.  If $h$ is $0$ an exception 
    is raised.

void fmpz_fdiv_q_2exp(fmpz_t f, const fmpz_t g, ulong exp)

    Sets $f$ to $g$ divided by \code{2^exp}, but rounded down.

void fmpz_tdiv_q(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to the quotient of $g$ by $h$, rounding down towards
    zero.  If $h$ is $0$ an exception is raised.

void fmpz_tdiv_q_si(fmpz_t f, const fmpz_t g, long h)

    Set $f$ to the quotient of $g$ by $h$, rounding down towards
    zero.  If $h$ is $0$ an exception is raised.

void fmpz_tdiv_q_ui(fmpz_t f, const fmpz_t g, ulong h)

    Set $f$ to the quotient of $g$ by $h$, rounding down towards
    zero.  If $h$ is $0$ an exception is raised.

void fmpz_divexact(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to the quotient of $g$ and $h$, assuming that the
    division is exact, i.e.\ $g$ is a multiple of $h$.  If $h$ 
    is $0$ an exception is raised.

void fmpz_divexact_si(fmpz_t f, const fmpz_t g, long h)

    Sets $f$ to the quotient of $g$ and $h$, assuming that the
    division is exact, i.e.\ $g$ is a multiple of $h$.  If $h$ 
    is $0$ an exception is raised.

void fmpz_divexact_ui(fmpz_t f, const fmpz_t g, ulong h)

    Sets $f$ to the quotient of $g$ and $h$, assuming that the
    division is exact, i.e.\ $g$ is a multiple of $h$.  If $h$ 
    is $0$ an exception is raised.

void fmpz_mod(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to the remainder of $g$ divided by $h$.  The remainder
    is always taken to be positive.

ulong fmpz_mod_ui(fmpz_t f, const fmpz_t g, ulong x)

    Sets $f$ to $g$ reduced modulo $x$ where $x$ is an 
    \code{unsigned long}.  If $x$ is $0$ an exception will result.

ulong fmpz_fdiv_ui(const fmpz_t g, ulong x)

    Returns the remainder of $g$ modulo $x$ where $x$ is an 
    \code{unsigned long}, without changing $g$.  If $x$ is $0$ an
    exception will result.

void fmpz_pow_ui(fmpz_t f, const fmpz_t g, ulong x)

    Sets $f$ to $g^x$ where $x$ is an \code{unsigned long}.  If 
    $x$ is $0$ and $g$ is $0$, then $f$ will be set to $1$.

void fmpz_sqrt(fmpz_t f, const fmpz_t g)

    Sets $f$ to the integer part of the square root of $g$, where 
    $g$ is assumed to be non-negative.  If $g$ is negative, an exception 
    is raised.

void fmpz_sqrtrem(fmpz_t f, fmpz_t r, const fmpz_t g)

    Sets $f$ to the integer part of the square root of $g$, where $g$ is 
    assumed to be non-negative, and sets $r$ to the remainder, that is, 
    the difference $g - f^2$.  If $g$ is negative, an exception is raised.  
    The behaviour is undefined if $f$ and $r$ are aliases.

void fmpz_fac_ui(fmpz_t f, ulong n)

    Sets $f$ to $n!$ where $n$ is an \code{unsigned long}.

*******************************************************************************

    Greatest common divisor

*******************************************************************************

void fmpz_gcd(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to the greatest common divisor of $g$ and $h$.  The 
    result is always positive, even if one of $g$ and $h$ is
    negative.

*******************************************************************************

    Modular arithmetic

*******************************************************************************

int fmpz_invmod(fmpz_t f, const fmpz_t g, const fmpz_t h)

    Sets $f$ to the inverse of $g$ modulo $h$.  The value of $h$ may 
    not be $0$ otherwise an exception results.  If the inverse exists 
    the return value will be non-zero, otherwise the return value will
    be $0$ and the value of $f$ undefined. 

*******************************************************************************

    Bit packing and unpacking

*******************************************************************************

int fmpz_bit_pack(mp_limb_t * arr, mp_bitcnt_t shift, 
    mp_bitcnt_t bits, fmpz_t coeff, int negate, int borrow)

    Shifts left the given coefficient by \code{shift} bits and add it to 
    the integer in \code{arr} in a field of the given number of bits.

    \begin{lstlisting}
    shift  bits  --------------

    X X X C C C C 0 0 0 0 0 0 0
    \end{lstlisting}

    An optional borrow of~$1$ can be subtracted from \code{coeff} before 
    it is packed.  If \code{coeff} is negative (after the borrow), then a 
    borrow will be returned by the function.

    The value of \code{shift} is assumed to be less than \code{FLINT_BITS}. 
    All but the first \code{shift} bits of \code{arr} are assumed to be zero 
    on entry to the function.

    The value of \code{coeff} may also be optionally (and notionally) negated 
    before it is used, by setting the \code{negate} parameter to $-1$.

int fmpz_bit_unpack(fmpz_t coeff, mp_limb_t * arr, 
    mp_bitcnt_t shift, mp_bitcnt_t bits, int negate, int borrow)

    A bit field of the given number of bits is extracted from \code{arr},
    starting after \code{shift} bits, and placed into \code{coeff}.  An 
    optional borrow of~$1$ may be added to the coefficient.  If the result 
    is negative, a borrow of $1$ is returned.  Finally, the resulting 
    \code{coeff} may be negated by setting the \code{negate} parameter to $-1$.

    The value of \code{shift} is expected to be less than \code{FLINT_BITS}.

void fmpz_bit_unpack_unsigned(fmpz_t coeff, 
    const mp_limb_t * arr, mp_bitcnt_t shift, mp_bitcnt_t bits)

    A bit field of the given number of bits is extracted from \code{arr},
    starting after \code{shift} bits, and placed into \code{coeff}.

    The value of \code{shift} is expected to be less than \code{FLINT_BITS}.

*******************************************************************************

    Chinese remaindering

    The following functions can be used to reconstruct an integer from its
    residues modulo a set of small (word-size) prime numbers. The first two
    functions, \code{fmpz_CRT_ui} and \code{fmpz_CRT_ui_unsigned}, are easy
    to use and allow building the result one residue at a time, which is
    useful when the number of needed primes is not known in advance.

    The remaining functions support performing the modular reductions and
    reconstruction using balanced subdivision. This greatly improves
    efficiency for large integers but assumes that the basis of primes is
    known in advance. The user must precompute a \code{comb}
    structure and temporary working space with \code{fmpz_comb_init} and
    \code{fmpz_comb_temp_init}, and free this data afterwards.

    For simple demonstration programs showing how to use the CRT functions,
    see \code{crt.c} and \code{multi_crt.c} in the \code{examples}
    directory.

*******************************************************************************

void fmpz_CRT_ui_unsigned(fmpz_t out, fmpz_t r1, fmpz_t m1, ulong r2, ulong m2)

    Uses the Chinese Remainder Theorem to compute the unique integer
    $0 \le x < M$ congruent to $r_1$ modulo $m_1$ and $r_2$ modulo $m_2$,
    where $M = m_1 \times m_2$. It is assumed that $m_1$ and $m_2$ are
    positive integers greater than $1$ and coprime, and that $0 \le r_1 < m_1$
    and $0 \le r_2 < m_2$. The result $x$ is stored in \code{out}.

void fmpz_CRT_ui(fmpz_t out, fmpz_t r1, fmpz_t m1, ulong r2, ulong m2)

    Uses the Chinese Remainder Theorem to compute the unique integer
    $-M/2 \le x < M/2$ congruent to $r_1$ modulo $m_1$ and $r_2$ modulo $m_2$,
    where $M = m_1 \times m_2$. It is assumed that $m_1$ and $m_2$ are
    positive integers greater than $1$ and coprime, and that
    $-m_1 \le r_1 < m_1$ and $0 \le r_2 < m_2$.
    The result $x$ is stored in \code{out}.

void fmpz_multi_mod_ui(mp_limb_t * out, const fmpz_t in,
    const fmpz_comb_t comb, fmpz_comb_temp_t temp)

    Reduces the multiprecision integer \code{in} modulo each of the primes 
    stored in the \code{comb} structure. The array \code{out} will be filled 
    with the residues modulo these primes. The structure \code{temp} is
    temporary space which must be provided by \code{fmpz_comb_temp_init} and
    cleared by \code{fmpz_comb_temp_clear}.

void fmpz_multi_CRT_ui_unsigned(fmpz_t output, const mp_limb_t * residues,
    const fmpz_comb_t comb, fmpz_comb_temp_t temp)

    This function takes a set of residues modulo the list of primes
    contained in the \code{comb} structure and reconstructs the unique 
    unsigned multiprecision integer modulo the product of the primes 
    which has these residues modulo the corresponding primes. The structure 
    \code{temp} is temporary space which must be provided by 
    \code{fmpz_comb_temp_init} and cleared by \code{fmpz_comb_temp_clear}.

void fmpz_multi_CRT_ui(fmpz_t output, const mp_limb_t * residues,
    const fmpz_comb_t comb, fmpz_comb_temp_t temp)

    This function takes a set of residues modulo the list of primes
    contained in the \code{comb} structure and reconstructs a signed 
    multiprecision integer modulo the product of the primes which has 
    these residues modulo the corresponding primes. If $N$ is the 
    product of all the primes then \code{out} is normalised to be in 
    the range $[-(N-1)/2, N/2]$.  The array \code{temp} is temporary 
    space which must be provided by \code{fmpz_comb_temp_init} and 
    cleared by \code{fmpz_comb_temp_clear}.

void fmpz_comb_init(fmpz_comb_t comb, mp_limb_t * primes, long num_primes)

    Initialises a \code{comb} structure for multimodular reduction and 
    recombination.  The array \code{primes} is assumed to contain 
    \code{num_primes} primes each of \code{FLINT_BITS - 1} bits. Modular 
    reductions and recombinations will be done modulo this list of primes. 
    The \code{primes} array must not be \code{free}'d until the \code{comb} 
    structure is no longer required and must be cleared by the user.

void fmpz_comb_temp_init(fmpz_comb_temp_t temp, const fmpz_comb_t comb)

    Creates temporary space to be used by multimodular and CRT functions
    based on an initialised \code{comb} structure.

void fmpz_comb_clear(fmpz_comb_t comb)

    Clears the given \code{comb} structure, releasing any memory it uses.

void fmpz_comb_temp_clear(fmpz_comb_temp_t temp)

    Clears the given \code{comb} temporary data, releasing any memory it uses.

